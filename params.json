{"name":"ReadWriteLock","tagline":"Asynchronous read / write lock implementation for Node.js","body":"rwlock\r\n======\r\n\r\nAsynchronous read/write lock implementation for Node.js.\r\n\r\nMain rules:\r\n- there may be zero or more readers at a time,\r\n- there may be only one writer at a time,\r\n- there may be no writer if there are one or more readers already.\r\n\r\nInstallation\r\n------------\r\n\r\nIt's on [npmjs](https://npmjs.org/package/rwlock):\r\n\r\n```bash\r\n$ npm install rwlock\r\n```\r\n\r\nBasic usage\r\n-----------\r\n\r\nRequiring the package, creating an instance:\r\n\r\n```javascript\r\nvar ReadWriteLock = require('rwlock');\r\n\r\nvar lock = new ReadWriteLock();\r\n```\r\n\r\nAcquiring a read lock:\r\n\r\n```javascript\r\nlock.readLock(function (release) {\r\n\t// do stuff\r\n\r\n\trelease();\r\n});\r\n```\r\n\r\nAcquiring a write lock:\r\n\r\n```javascript\r\nlock.writeLock(function (release) {\r\n\t// do stuff\r\n\r\n\trelease();\r\n});\r\n```\r\n\r\nLocks can be released later:\r\n\r\n```javascript\r\nlock.readLock(function (release) {\r\n\t// not ready to release yet\r\n\r\n\tsetTimeout(function () {\r\n\t\t// ok, now I'm ready\r\n\t\trelease();\r\n\t}, 1000);\r\n});\r\n```\r\n\r\nUpgrading to a write lock\r\n-------------------------\r\n\r\nReadWriteLock does not explicitly support upgrading but you can take advantage of the asynchronous-ness:\r\n\r\n```javascript\r\nlock.readLock(function (release) {\r\n\t// read stuff here\r\n\r\n\t// ok, I now realize I need to write\r\n\r\n\t// this will be queued\r\n\tlock.writeLock(function (release) {\r\n\t\t// you can write here\r\n\r\n\t\trelease();\r\n\r\n\t\t// everything is now released.\r\n\t});\r\n\r\n\t// release the read lock, this will activate the writer\r\n\trelease();\r\n});\r\n```\r\n\r\nDowngrading to a read lock\r\n--------------------------\r\n\r\nSimilar to upgrading:\r\n\r\n```javascript\r\nlock.writeLock(function (release) {\r\n\tlock.readLock(function (release) {\r\n\t\t// ...\r\n\t\trelease();\r\n\t});\r\n\trelease();\r\n});\r\n```\r\n\r\nKeys\r\n----\r\n\r\nEvery ReadWriteLock instance allows you to work on a virtually unlimited number of completely independent read/write locks.\r\n\r\nLocks are identified by names called \"keys\". Every exposed method has an optional \"key\" first argument indicating the lock to work on; if you don't specify a key, the default lock is used.\r\n\r\nExample:\r\n\r\n```javascript\r\nlock.writeLock('lock1', function (release) {\r\n\tconsole.log('writing 1...');\r\n\tlock.writeLock('lock2', function (release) {\r\n\t\tconsole.log('writing 2...');\r\n\t\trelease();\r\n\t\tconsole.log('done 2.');\r\n\t});\r\n\trelease();\r\n\tconsole.log('done 1.');\r\n});\r\n```\r\n\r\nThe previous example logs:\r\n\r\n```\r\nwriting 1...\r\nwriting 2...\r\ndone 2.\r\ndone 1.\r\n```\r\n\r\n[async](https://npmjs.org/package/async) compatibility\r\n------------------------------------------------------\r\n\r\nThe ReadWriteLock class does not return errors to your callbacks, but many APIs in Node do. The `async` module uses that as a convention: callbacks usually receive two arguments, a possibly `null` error object and the actual result in case there is no error.\r\n\r\nTo aid `async` compatibility, ReadWriteLock sends `null` errors if you specify the `async` flag like in the following example:\r\n\r\n```javascript\r\nlock.async.readLock(function (error, release) {\r\n\t// no need to check on error, it will always be null\r\n\r\n\t// do stuff here\r\n\r\n\trelease();\r\n});\r\n```\r\n\r\nYou can use `rwlock` and `async` together like in this example:\r\n\r\n```javascript\r\nvar releaseLock = null;\r\n\r\nasync.waterfall([function (next) {\r\n\tlock.async.writeLock(next);\r\n}, function (release, next) {\r\n\treleaseLock = release;\r\n\tfs.writeFile('file', 'content', next);\r\n}, function (next) {\r\n\treleaseLock();\r\n\tnext(null);\r\n}], function (error) {\r\n\tif (error) {\r\n\t\tif (releaseLock) {\r\n\t\t\treleaseLock();\r\n\t\t}\r\n\t\tconsole.dir(error);\r\n\t} else {\r\n\t\tconsole.log('done.');\r\n\t}\r\n});\r\n```\r\n\r\nBuilding from source and testing\r\n--------------------------------\r\n\r\nYou don't need this, but in case you want:\r\n\r\n```bash\r\n$ sudo npm install -g grunt-cli\r\n$ cd\r\n$ git clone https://github.com/71104/rwlock.git\r\n$ cd rwlock\r\n$ npm install\r\n$ grunt all\r\n```\r\n\r\nThe following folders will be generated:\r\n- **lib**, containing the minified ReadWriteLock class to `require` in Node.js;\r\n- **doc**, containing the API reference documentation in HTML format.\r\n\r\nLicense\r\n-------\r\n\r\nMIT. Copyright 2013 Alberto La Rocca\r\n","google":"UA-36961344-7","note":"Don't delete this file! It's used internally to help with page regeneration."}