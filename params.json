{"name":"ReadWriteLock","tagline":"Asynchronous read / write lock implementation for Node.js","body":"rwlock\r\n======\r\n\r\nAsynchronous read/write lock implementation for Node.js.\r\n\r\nMain rules:\r\n- there may be zero or more readers at a time,\r\n- there may only be one writer at a time,\r\n- there may be no writer if there are one or more readers already.\r\n\r\nBasic usage\r\n-----------\r\n\r\nRequiring the package, creating an instance:\r\n\r\n```javascript\r\nvar ReadWriteLock = require('rwlock');\r\n\r\nvar lock = new ReadWriteLock();\r\n```\r\n\r\nAcquiring a read lock:\r\n\r\n```javascript\r\nlock.readLock(function (release) {\r\n\t// do stuff\r\n\r\n\trelease();\r\n});\r\n```\r\n\r\nAcquiring a write lock:\r\n\r\n```javascript\r\nlock.writeLock(function (release) {\r\n\t// do stuff\r\n\r\n\trelease();\r\n});\r\n```\r\n\r\nLocks can be released later:\r\n\r\n```javascript\r\nlock.readLock(function (release) {\r\n\t// not ready to release yet\r\n\r\n\tsetTimeout(function () {\r\n\t\t// ok, now I'm ready\r\n\t\trelease();\r\n\t}, 1000);\r\n});\r\n```\r\n\r\nSections\r\n--------\r\n\r\n\"Sections\" are functions executed within a read or write lock and need not be\r\nreleased.\r\n\r\nExample:\r\n\r\n```javascript\r\nlock.readSection(function () {\r\n\tconsole.log('No one is writing now');\r\n});\r\n\r\nlock.writeSection(function () {\r\n\tconsole.log('No one is reading now');\r\n});\r\n```\r\n\r\nKeys\r\n----\r\n\r\nEvery ReadWriteLock instance allows you to work on a virtually unlimited number of completely independent read/write locks.\r\n\r\nLocks are identified by names called \"keys\". Every exposed method has an optional \"key\" first argument indicating the lock to work on; if you don't specify a key, the default lock is used.\r\n\r\nExample:\r\n\r\n```javascript\r\nlock.writeLock('lock1', function (release) {\r\n\tconsole.log('writing 1...');\r\n\tlock.writeLock('lock2', function (release) {\r\n\t\tconsole.log('writing 2...');\r\n\t\trelease();\r\n\t\tconsole.log('done 2.');\r\n\t});\r\n\trelease();\r\n\tconsole.log('done 1.');\r\n});\r\n```\r\n\r\nThe previous example logs:\r\n\r\n```\r\nwriting 1...\r\nwriting 2...\r\ndone 2.\r\ndone 1.\r\n```\r\n\r\n[async](https://npmjs.org/package/async) compatibility\r\n------------------------------------------------------\r\n\r\nThe ReadWriteLock class does not return errors to your callbacks, but many APIs in Node do. The `async` module uses that as a convention: callbacks usually receive two arguments, a possibly `null` error object and the actual result in case there is no error.\r\n\r\nTo aid `async` compatibility, ReadWriteLock sends `null` errors if you specify the `async` flag like in the following example:\r\n\r\n```javascript\r\nlock.async.readLock(function (error, release) {\r\n\t// no need to check on error, it will always be null\r\n\r\n\t// do stuff here\r\n\r\n\trelease();\r\n});\r\n```\r\n\r\nYou can use `rwlock` and `async` together like in this example:\r\n\r\nTODO\r\n","google":"UA-36961344-7","note":"Don't delete this file! It's used internally to help with page regeneration."}